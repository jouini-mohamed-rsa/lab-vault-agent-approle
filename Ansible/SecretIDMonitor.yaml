---
- name: "Monitor Secret ID validity and regenerate if needed"
  hosts: localhost
  gather_facts: yes
  vars_files:
    - lab-vars.yml
  
  tasks:
    - name: "Read Ansible AppRole credentials"
      set_fact:
        ansible_role_id: "{{ lookup('file', ansible_role_id_file) }}"
        ansible_secret_id: "{{ lookup('file', ansible_secret_id_file) }}"
      no_log: true

    - name: "Authenticate with Ansible AppRole"
      uri:
        url: "{{ vault_url }}/v1/auth/approle/login"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          role_id: "{{ ansible_role_id }}"
          secret_id: "{{ ansible_secret_id }}"
        validate_certs: yes
        ca_path: "{{ vault_cacert_path }}"
      register: ansible_auth_result
      no_log: true

    # ✅ FIXED: List existing Secret IDs instead of creating new ones
    - name: "List existing Secret ID accessors"
      uri:
        url: "{{ vault_url }}/v1/auth/approle/role/{{ app_name }}/secret-id"
        method: LIST
        headers:
          X-Vault-Token: "{{ ansible_auth_result.json.auth.client_token }}"
        validate_certs: yes
        ca_path: "{{ vault_cacert_path }}"
        status_code: [200, 404]
      register: secret_id_list
      failed_when: false

    - name: "Get AppRole configuration"
      uri:
        url: "{{ vault_url }}/v1/auth/approle/role/{{ app_name }}"
        method: GET
        headers:
          X-Vault-Token: "{{ ansible_auth_result.json.auth.client_token }}"
        validate_certs: yes
        ca_path: "{{ vault_cacert_path }}"
      register: approle_info

    - name: "Get Role ID"
      uri:
        url: "{{ vault_url }}/v1/auth/approle/role/{{ app_name }}/role-id"
        method: GET
        headers:
          X-Vault-Token: "{{ ansible_auth_result.json.auth.client_token }}"
        validate_certs: yes
        ca_path: "{{ vault_cacert_path }}"
      register: role_id_result

    # ✅ Check Secret IDs on agent hosts
    - name: "Check Secret ID files on agent hosts"
      stat:
        path: "/opt/vault-agent/secret-id"
      register: agent_secret_id_file
      delegate_to: "{{ item }}"
      loop: "{{ groups['vault_agents'] | default(['vault-agent']) }}"
      become: yes
      failed_when: false

    - name: "Read Secret ID from agent hosts (if exists)"
      slurp:
        src: "/opt/vault-agent/secret-id"
      register: agent_secret_id_content
      delegate_to: "{{ item.item }}"
      loop: "{{ agent_secret_id_file.results }}"
      become: yes
      when: item.stat.exists
      failed_when: false
      no_log: true

    # ✅ FIXED: Test existing Secret IDs validity
    - name: "Test Secret ID validity on agents"
      uri:
        url: "{{ vault_url }}/v1/auth/approle/login"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          role_id: "{{ role_id_result.json.data.role_id }}"
          secret_id: "{{ item.content | b64decode | trim }}"
        validate_certs: yes
        ca_path: "{{ vault_cacert_path }}"
        status_code: [200, 400, 403, 404]
      register: secret_id_validation
      loop: "{{ agent_secret_id_content.results | default([]) }}"
      when: item.content is defined
      failed_when: false
      no_log: true

    # ✅ FIXED: Extract Secret ID accessors to avoid .keys() method conflict
    - name: "Extract Secret ID accessors"
      set_fact:
        secret_id_accessors: "{{ secret_id_list['json']['data']['keys'] | default([]) }}"
      when: 
        - secret_id_list.status == 200
        - secret_id_list.json is defined
        - secret_id_list.json.data is defined

    - name: "Set empty accessors if list failed"
      set_fact:
        secret_id_accessors: []
      when: secret_id_list.status != 200

    # ✅ FIXED: Get detailed info about existing Secret IDs
    - name: "Get detailed Secret ID information"
      uri:
        url: "{{ vault_url }}/v1/auth/approle/role/{{ app_name }}/secret-id-accessor/lookup"
        method: POST
        headers:
          X-Vault-Token: "{{ ansible_auth_result.json.auth.client_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          secret_id_accessor: "{{ item }}"
        validate_certs: yes
        ca_path: "{{ vault_cacert_path }}"
        status_code: [200, 404]
      register: secret_id_details
      loop: "{{ secret_id_accessors | default([]) }}"
      failed_when: false

    # ✅ FIXED: Calculate Secret ID status with proper variable handling
    - name: "Calculate Secret ID status"
      set_fact:
        current_time: "{{ ansible_date_time.epoch | int }}"
        secret_id_ttl_configured: "{{ approle_info.json.data.secret_id_ttl | int }}"
        valid_secret_ids: "{{ secret_id_validation.results | default([]) | selectattr('status', 'defined') | selectattr('status', '==', 200) | list }}"
        invalid_secret_ids: "{{ secret_id_validation.results | default([]) | selectattr('status', 'defined') | selectattr('status', '!=', 200) | list }}"
        missing_files_count: "{{ agent_secret_id_file.results | selectattr('stat.exists', 'equalto', false) | list | length }}"
        total_accessors: "{{ secret_id_accessors | default([]) | length }}"

    # ✅ FIXED: Determine if regeneration is needed with clean variables
    - name: "Evaluate regeneration need"
      set_fact:
        needs_regeneration: >-
          {{
            (secret_id_list.status != 200) or
            (total_accessors | int == 0) or
            (missing_files_count | int > 0) or
            (valid_secret_ids | length == 0) or
            (secret_id_ttl_configured | int > 0 and secret_id_ttl_configured | int < secret_id_renewal_threshold | int)
          }}
        regeneration_reason: >-
          {{
            'Vault API error (status: ' + (secret_id_list.status | string) + ')' if secret_id_list.status != 200 else
            'No Secret ID accessors found' if (total_accessors | int == 0) else
            'Secret ID file missing on ' + (missing_files_count | string) + ' agent(s)' if (missing_files_count | int > 0) else
            'All Secret IDs invalid (' + (valid_secret_ids | length | string) + ' valid)' if (valid_secret_ids | length == 0) else
            'Secret ID expiring soon (TTL: ' + (secret_id_ttl_configured | string) + 's, threshold: ' + (secret_id_renewal_threshold | string) + 's)' if (secret_id_ttl_configured | int > 0 and secret_id_ttl_configured | int < secret_id_renewal_threshold | int) else
            'No regeneration needed'
          }}

    - name: "Display monitoring results"
      debug:
        msg:
          - "=== Secret ID Monitoring Report ==="
          - "App Name: {{ app_name }}"
          - "Secret ID TTL Configured: {{ secret_id_ttl_configured }} seconds ({{ (secret_id_ttl_configured | int / 3600) | round(1) }} hours)"
          - "Total Secret ID Accessors: {{ total_accessors }}"
          - "Valid Secret IDs: {{ valid_secret_ids | length }}"
          - "Invalid Secret IDs: {{ invalid_secret_ids | length }}"
          - "Missing Secret Files: {{ missing_files_count }}"
          - "Renewal Threshold: {{ secret_id_renewal_threshold }} seconds ({{ (secret_id_renewal_threshold | int / 60) | round(1) }} minutes)"
          - "Regeneration Needed: {{ needs_regeneration }}"
          - "Regeneration Reason: {{ regeneration_reason }}"
          - "Current Time: {{ ansible_date_time.iso8601 }}"

    # ✅ Generate new Secret ID only when needed
    - name: "Generate new wrapped Secret ID"
      uri:
        url: "{{ vault_url }}/v1/auth/approle/role/{{ app_name }}/secret-id"
        method: POST
        headers:
          X-Vault-Token: "{{ ansible_auth_result.json.auth.client_token }}"
          X-Vault-Wrap-TTL: "{{ wrap_ttl }}"
        body_format: json
        body: {}
        validate_certs: yes
        ca_path: "{{ vault_cacert_path }}"
      register: new_wrapped_secret
      when: needs_regeneration | bool
      no_log: true

    - name: "Deploy new wrapped Secret ID to agent hosts"
      copy:
        content: "{{ new_wrapped_secret.json.wrap_info.token }}"
        dest: "/opt/vault-agent/secret-id"
        mode: '0600'
        owner: "{{ agent_user }}"
        group: "{{ agent_group }}"
      delegate_to: "{{ item }}"
      loop: "{{ groups['vault_agents'] | default(['vault-agent']) }}"
      become: yes
      when: needs_regeneration | bool and new_wrapped_secret.json is defined

    - name: "Restart vault-agent service"
      systemd:
        name: vault-agent
        state: restarted
      delegate_to: "{{ item }}"
      loop: "{{ groups['vault_agents'] | default(['vault-agent']) }}"
      become: yes
      when: needs_regeneration | bool and new_wrapped_secret.json is defined

    # ✅ FIXED: Ensure log directory exists
    - name: "Ensure log directory exists"
      file:
        path: "/home/ubuntu/logs"
        state: directory
        mode: '0755'

    # ✅ FIXED: Better logging with proper path
    - name: "Log monitoring results"
      copy:
        content: |
          # Secret ID Monitoring Log - {{ ansible_date_time.iso8601 }}
          App Name: {{ app_name }}
          Total Secret ID Accessors: {{ total_accessors }}
          Valid Secret IDs: {{ valid_secret_ids | length }}
          Invalid Secret IDs: {{ invalid_secret_ids | length }}
          Missing Secret Files: {{ missing_files_count }}
          Regeneration Needed: {{ needs_regeneration }}
          Reason: {{ regeneration_reason }}
          Action: {{ 'New Secret ID generated and deployed' if needs_regeneration else 'No action needed' }}
          TTL Configured: {{ secret_id_ttl_configured }}s ({{ (secret_id_ttl_configured | int / 3600) | round(1) }}h)
          Renewal Threshold: {{ secret_id_renewal_threshold }}s ({{ (secret_id_renewal_threshold | int / 60) | round(1) }}m)
          Next check scheduled: {{ '%Y-%m-%d %H:%M:%S UTC' | strftime((ansible_date_time.epoch | int + 600)) }}
          ---
          
        dest: "/home/ubuntu/logs/secret-id-monitor.log"
        mode: '0644'
      delegate_to: localhost

    - name: "Final status report"
      debug:
        msg:
          - "🎯 Secret ID Monitoring Complete!"
          - ""
          - "📊 Results Summary:"
          - "  ├─ App Name: {{ app_name }}"
          - "  ├─ Secret ID Accessors: {{ total_accessors }}"
          - "  ├─ Valid Secret IDs: {{ valid_secret_ids | length }}"
          - "  ├─ Invalid Secret IDs: {{ invalid_secret_ids | length }}"
          - "  ├─ Missing Files: {{ missing_files_count }}"
          - "  └─ Regeneration Needed: {{ needs_regeneration }}"
          - ""
          - "🔄 Action Taken:"
          - "  └─ {{ 'New Secret ID deployed and agents restarted' if needs_regeneration else 'No action required - all systems healthy' }}"
          - ""
          - "📋 Reason: {{ regeneration_reason }}"
          - ""
          - "⏰ Next automatic check in 10 minutes"
