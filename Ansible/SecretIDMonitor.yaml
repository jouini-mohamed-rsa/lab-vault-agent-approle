---
- name: "Monitor Secret ID validity and regenerate if needed"
  hosts: localhost
  gather_facts: yes
  vars_files:
    - lab-vars.yml
  vars:
    # Cron job configuration
    cron_user: "ubuntu"
    cron_job_name: "vault-secret-id-monitor"
    playbook_path: "/home/ubuntu/ansible"

  tasks:
    - name: "Get current Secret ID information from Vault"
      uri:
        url: "{{ vault_url }}/v1/auth/approle/role/{{ app_name }}/secret-id"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_admin_token }}"
        body_format: json
        body: {}
        validate_certs: no
        status_code: [200, 400, 403]
      register: secret_id_info
      failed_when: false
      no_log: true

    - name: "Check if Secret ID exists and get metadata"
      uri:
        url: "{{ vault_url }}/v1/auth/approle/role/{{ app_name }}"
        method: GET
        headers:
          X-Vault-Token: "{{ vault_admin_token }}"
        validate_certs: no
      register: approle_info

    - name: "Calculate Secret ID TTL remaining"
      set_fact:
        current_time: "{{ ansible_date_time.epoch | int }}"
        secret_id_ttl_seconds: "{{ approle_info.json.data.secret_id_ttl | int }}"
        secret_id_num_uses: "{{ approle_info.json.data.secret_id_num_uses | int }}"

    - name: "Get Secret ID accessor information"
      uri:
        url: "{{ vault_url }}/v1/auth/approle/role/{{ app_name }}/secret-id"
        method: LIST
        headers:
          X-Vault-Token: "{{ vault_admin_token }}"
        validate_certs: no
        status_code: [200, 404]
      register: secret_id_list
      failed_when: false

    - name: "Get Role ID for validation"
      uri:
        url: "{{ vault_url }}/v1/auth/approle/role/{{ app_name }}/role-id"
        method: GET
        headers:
          X-Vault-Token: "{{ vault_admin_token }}"
        validate_certs: no
      register: role_id_result
      failed_when: false
      no_log: true

    - name: "Check existing Secret ID status on agent hosts"
      block:
        - name: "Get Secret ID from agent host"
          slurp:
            src: "/opt/vault-agent/secret-id"
          register: agent_secret_id
          delegate_to: "{{ item }}"
          loop: "{{ groups['vault_agents'] | default(['vault-agent']) }}"
          become: yes
          failed_when: false
          no_log: true

        - name: "Validate Secret ID with Vault"
          uri:
            url: "{{ vault_url }}/v1/auth/approle/login"
            method: POST
            headers:
              Content-Type: "application/json"
            body_format: json
            body:
              role_id: "{{ role_id_result.json.data.role_id | default('') }}"
              secret_id: "{{ item.content | b64decode | trim }}"
            validate_certs: no
            status_code: [200, 400, 403]
          register: secret_id_validation
          loop: "{{ agent_secret_id.results }}"
          when: item.content is defined
          failed_when: false
          no_log: true

    - name: "Determine if Secret ID regeneration is needed"
      set_fact:
        needs_regeneration: >-
          {{
            (secret_id_info.status != 200) or
            (secret_id_ttl_seconds | int < secret_id_renewal_threshold) or
            (agent_secret_id.results | selectattr('content', 'undefined') | list | length > 0) or
            (secret_id_validation.results | selectattr('status', 'defined') | selectattr('status', '!=', 200) | list | length > 0)
          }}
        regeneration_reason: >-
          {{
            'API Error' if secret_id_info.status != 200 else
            'TTL Expiring Soon' if (secret_id_ttl_seconds | int < secret_id_renewal_threshold) else
            'Secret ID Missing on Agent' if (agent_secret_id.results | selectattr('content', 'undefined') | list | length > 0) else
            'Secret ID Invalid' if (secret_id_validation.results | selectattr('status', 'defined') | selectattr('status', '!=', 200) | list | length > 0) else
            'No Regeneration Needed'
          }}

    - name: "Display monitoring results"
      debug:
        msg:
          - "=== Secret ID Monitoring Report ==="
          - "App Name: {{ app_name }}"
          - "Secret ID TTL: {{ secret_id_ttl_seconds }} seconds ({{ (secret_id_ttl_seconds | int / 3600) | round(1) }} hours)"
          - "Secret ID Num Uses: {{ secret_id_num_uses }}"
          - "Renewal Threshold: {{ secret_id_renewal_threshold }} seconds"
          - "Max Uses Threshold: {{ max_uses_threshold }}"
          - "Regeneration Needed: {{ needs_regeneration }}"
          - "Regeneration Reason: {{ regeneration_reason }}"
          - "Current Time: {{ ansible_date_time.iso8601 }}"

    - name: "Generate new wrapped Secret ID if needed"
      uri:
        url: "{{ vault_url }}/v1/auth/approle/role/{{ app_name }}/secret-id"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_admin_token }}"
          X-Vault-Wrap-TTL: "{{ wrap_ttl }}"
        body_format: json
        body: {}
        validate_certs: no
      register: new_wrapped_secret
      when: needs_regeneration | bool
      no_log: true

    - name: "Deploy new wrapped Secret ID to agent hosts"
      copy:
        content: "{{ new_wrapped_secret.json.wrap_info.token }}"
        dest: "/opt/vault-agent/secret-id"
        mode: '0600'
        owner: vault-agent
        group: vault-agent
      delegate_to: "{{ item }}"
      loop: "{{ groups['vault_agents'] | default(['vault-agent']) }}"
      become: yes
      when: needs_regeneration | bool and new_wrapped_secret.json is defined

    - name: "Restart vault-agent service to use new Secret ID"
      systemd:
        name: vault-agent
        state: restarted
      delegate_to: "{{ item }}"
      loop: "{{ groups['vault_agents'] | default(['vault-agent']) }}"
      become: yes
      when: needs_regeneration | bool and new_wrapped_secret.json is defined

    - name: "Log monitoring action"
      copy:
        content: |
          # Secret ID Monitoring Log
          Timestamp: {{ ansible_date_time.iso8601 }}
          App Name: {{ app_name }}
          Secret ID TTL: {{ approle_info.json.data.secret_id_ttl }}
          Secret ID Num Uses: {{ secret_id_num_uses }}
          Regeneration Needed: {{ needs_regeneration }}
          Regeneration Reason: {{ regeneration_reason }}
          Action: {{ 'Regenerated Secret ID' if needs_regeneration else 'No action needed' }}
          ---
        dest: "/tmp/secret-id-monitor.log"
        mode: '0644'
      delegate_to: localhost

    - name: "Display monitoring completion"
      debug:
        msg:
          - "ðŸŽ¯ Secret ID Monitoring Complete!"
          - ""
          - "Results:"
          - "  - Regeneration Needed: {{ needs_regeneration }}"
          - "  - Reason: {{ regeneration_reason }}"
          - "  - Action: {{ 'New Secret ID generated and deployed' if needs_regeneration else 'No action needed' }}"
          - ""
          - "Manual Commands:"
          - "  task ansible-monitor  # Run monitoring manually"
          - "  task ansible-secret-id # Generate new Secret ID"
